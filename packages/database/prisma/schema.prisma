generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name String @unique

  emails       UserEmail[] @relation("emails")
  defaultEmail UserEmail?  @relation("default")

  roles UserRole[]

  sessions  UserSession[]  @relation("session")
  providers UserProvider[] @relation("provider")
  passkeys  Passkey[]      @relation("userPasskeys")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications          Application[]   @relation("applications")
  authorizations        Authorization[] @relation("userAuthorization")
  authorizationRequests AuthorizationRequest[]
  applicationGrants     ApplicationGrant[] @relation("applicationGrants")

  accounts Account[] @relation("userAccount")
}

enum UserRole {
  Admin
}

model UserEmail {
  id String @id @default(uuid())

  email    String
  verified Boolean @default(false)

  verificationToken String? @unique

  userId String
  user   User   @relation("emails", fields: [userId], references: [id], onDelete: Cascade)

  isDefaultForUserId String? @unique
  isDefaultForUser   User?   @relation("default", fields: [isDefaultForUserId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  verifiedAt DateTime?

  applicationGrants ApplicationGrant[]

  applications Application[]   @relation("email")

  @@unique([userId, email])
}

model UserSession {
  id String @id @default(uuid())

  info String

  user   User   @relation("session", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())
}

model UserProvider {
  provider          UserProviderType
  providerAccountId String

  displayName String

  token Json?

  passkey   Passkey?
  passkeyId String?  @unique

  userId String
  user   User   @relation("provider", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usedAt    DateTime?

  @@id([provider, providerAccountId])
}

model UserProviderRequest {
  id    String @id @default(uuid())
  state String @unique

  provider UserProviderType
  type     UserProviderRequestType

  userId String?

  redirect_uri  String
  code_verifier String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserProviderType {
  discord
  github
  steam
  google
  passkey
  epicgames
}

enum UserProviderRequestType {
  login
  add
}

model Passkey {
  id        String @id
  publicKey Bytes

  provider UserProvider @relation(fields: [id], references: [passkeyId], onDelete: Cascade)

  user           User   @relation("userPasskeys", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webAuthnUserId String

  counter    BigInt
  deviceType String
  backedUp   Boolean
  transports String[]

  @@unique([webAuthnUserId, userId])
}

model Application {
  id String @id @default(uuid())

  name        String  @unique
  description String  @default("")
  public      Boolean @default(false)
  publicUrl   String  @default("")

  privacyPolicyUrl  String @default("")
  termsOfServiceUrl String @default("")

  imageId String?
  image   File?   @relation("applicationImage", fields: [imageId], references: [id], onDelete: SetNull)

  ownerId String
  owner   User   @relation("applications", fields: [ownerId], references: [id], onDelete: Cascade)

  emailId String?
  email   UserEmail? @relation("email", fields: [emailId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clients        Client[]           @relation("applicationClients")
  authorizations Authorization[]
  users          ApplicationGrant[] @relation("applicationGrants")
}

model Client {
  id String @id @default(uuid())

  name String @default("Default Client")
  @@unique([applicationId, name])

  type ClientType

  callbackUrls String[] @default([])

  applicationId String
  application   Application @relation("applicationClients", fields: [applicationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorizations        Authorization[]        @relation("clientAuthorization")
  secrets               ClientSecret[]         @relation("clientSecret")
  authorizationRequests AuthorizationRequest[]
}

enum ClientType {
  Confidential
  Public
}

model ClientSecret {
  id String @id @default(uuid())

  secret String @unique

  clientId String
  client   Client @relation("clientSecret", fields: [clientId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usedAt    DateTime?
}

model ApplicationGrant {
  id String @id @default(uuid())

  userId        String
  applicationId String
  @@unique([userId, applicationId])

  user        User        @relation("applicationGrants", fields: [userId], references: [id], onDelete: Cascade)
  application Application @relation("applicationGrants", fields: [applicationId], references: [id], onDelete: Cascade)

  scope String[]

  accounts Account[] @relation("applicationGrants")

  emailId String?
  email   UserEmail? @relation(fields: [emailId], references: [id], onDelete: Cascade)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  authorizations Authorization[]
  settings       ApplicationUserSettings?
}

model ApplicationUserSettings {
  applicationGrantId String @id
  applicationGrant    ApplicationGrant @relation(fields: [applicationGrantId], references: [id], onDelete: Cascade)

  settings Json

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Authorization {
  id String @id @default(uuid())

  type  AuthorizationType
  token String

  scope String[]

  redirectUri   String?
  codeChallenge String?

  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usedAt    DateTime?

  clientId String
  client   Client @relation("clientAuthorization", fields: [clientId], references: [id], onDelete: Cascade)

  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("userAuthorization", fields: [userId], references: [id], onDelete: Cascade)

  applicationGrant ApplicationGrant @relation(fields: [applicationId, userId], references: [applicationId, userId])

  @@unique([type, token])
  @@unique([type, clientId, userId])
}

enum AuthorizationType {
  Code
  AccessToken
  RefreshToken
}

model AuthorizationRequest {
  id String @id @default(uuid())

  type  AuthorizationRequestType
  state AuthorizationRequestState @default(Pending)

  data Json

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum AuthorizationRequestType {
  OAuth2
  OAuth2_PAR
  FedCM
}

enum AuthorizationRequestState {
  Pushed
  Pending
  Canceled
  Authorized
}

model ApiToken {
  id String @id @default(uuid())

  name  String
  token String

  permissions String[]

  accountId String
  account   Account @relation("accountApiToken", fields: [accountId], references: [id], onDelete: Cascade)

  errorCount Int @default(0)

  usedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id String @id @default(uuid())

  accountId   String
  accountName String

  displayName String?

  verified Boolean @default(false)

  userId String
  user   User   @relation("userAccount", fields: [userId], references: [id], onDelete: Cascade)

  apiTokens ApiToken[] @relation("accountApiToken")
  
  applicationGrants ApplicationGrant[] @relation("applicationGrants")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([accountId, userId])
}

model File {
  id String @id @default(uuid())

  data   Bytes
  sha256 String @unique
  type   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  applicationImage Application[] @relation("applicationImage")
}

model ApiRequest {
  id String @id @default(uuid())

  endpoint        String
  queryParameters String
  apiKey          String?

  status         Int
  response       String?
  responseTimeMs Float

  createdAt DateTime @default(now())
}
