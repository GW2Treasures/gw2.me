generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name  String  @unique
  email String? @unique

  sessions  UserSession[]  @relation("session")
  providers UserProvider[] @relation("provider")

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  applications   Application[]   @relation("applications")
  authorizations Authorization[] @relation("userAuthorization")

  accounts       Account[]      @relation("userAccount")
}

model UserSession {
  id String @id @default(uuid())
  
  info String

  user   User @relation("session", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())
}

model UserProvider {
  provider          String
  providerAccountId String

  @@id([provider, providerAccountId])

  displayName String
  token Json
  
  userId String
  user   User   @relation("provider", fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Application {
  id           String @default(uuid()) @id

  name         String
  description  String  @default("")
  public       Boolean @default(false)
  publicUrl    String  @default("")
  image        Bytes?

  clientId     String  @unique
  clientSecret String? @unique

  callbackUrls String[] @default([])

  ownerId  String
  owner    User      @relation("applications", fields: [ownerId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  authorizations Authorization[] @relation("appAuthorization")
}

model Authorization {
  id String @default(uuid()) @id

  type  AuthorizationType
  token String

  scope String[]

  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usedAt    DateTime?

  applicationId String
  application   Application @relation("appAuthorization", fields: [applicationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("userAuthorization", fields: [userId], references: [id], onDelete: Cascade)

  accounts Account[] @relation("accountAuthorization")

  @@unique([type, token])
  @@unique([type, applicationId, userId])
}

enum AuthorizationType {
  Code
  AccessToken
  RefreshToken
}

model ApiToken {
  id String @default(uuid()) @id

  name  String
  token String

  permissions String[]

  accountId String
  account   Account @relation("accountApiToken", fields: [accountId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id String @default(uuid()) @id

  accountId String
  accountName String

  displayName String?

  userId String
  user   User @relation("userAccount", fields: [userId], references: [id], onDelete: Cascade)

  apiTokens ApiToken[] @relation("accountApiToken")
  authorizations Authorization[] @relation("accountAuthorization")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([accountId, userId])
}
